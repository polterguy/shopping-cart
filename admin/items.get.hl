
// Read endpoint with paging, sorting on fully qualified table name (TABLE_NAME.COLUMN_NAME), filtering selecting records from your items table in your shopping-cart-demo database returning item_id, product_id, quantity, session_id filtering on item_id, product_id, quantity, session_id with authentication and authorisation for root,admin roles
.arguments

   // Number of records to return
   limit:long

   // Offset into the dataset of where to start retrieving records
   offset:long

   // What column to order by
   order:string

   // What direction to order, can be 'asc' or 'desc' implying ascending and descending
   direction:string

   // items table item_id column equality exact match filtering
   items.item_id.eq:long

   // items table product_id column equality exact match filtering
   items.product_id.eq:long

   // items table quantity column equality exact match filtering
   items.quantity.eq:long

   // items table session_id column wildcard filtering with SQL like '%' comparison
   items.session_id.like:string

   // items table session_id column equality exact match filtering
   items.session_id.eq:string

   // products table name column equality exact match filtering
   product_id.name.eq:string

   // products table name column wildcard filtering with SQL like '%' comparison
   product_id.name.like:string

// Meta data description for endpoint
.description:Read endpoint with paging, sorting on fully qualified table name (TABLE_NAME.COLUMN_NAME), filtering selecting records from your items table in your shopping-cart-demo database returning item_id, product_id, quantity, session_id filtering on item_id, product_id, quantity, session_id with authentication and authorisation for root,admin roles

// Type of endpoint
.type:crud-read

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root,admin

// Opening up our database connection.
data.connect:[generic|shopping-cart-demo]
   database-type:sqlite

   // Parametrising our read invocation with ordering arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/order
      get-nodes:x:@.arguments/*/direction
   remove-nodes:x:@.arguments/*/order
   remove-nodes:x:@.arguments/*/direction

   // Parametrising our read invocation with paging arguments if specified.
   add:x:./*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset

   // Parametrising our read invocation with filtering arguments.
   add:x:./*/data.read/*/where/*
      get-nodes:x:@.arguments/*

   // Reading data from database.
   data.read
      database-type:sqlite
      table:items
         join:products
            as:product_id
            type:left
            on
               and
                  items.product_id:product_id.product_id
      columns
         items.item_id
         items.product_id
         items.quantity
         items.session_id
         product_id.name
            as:product_id.name
      where
         and

   // Returning result of above read invocation to caller.
   return-nodes:x:@data.read/*
