
/*
 * Creates a scheduled task that imports all products from your products table in your shopping-cart-demo
 * database, and adds these as ml_training_snippets to your machine learning type.
 */

// Checking if ml_type with name of "shopping-cart-demo" exists, and if not, we create it.
data.connect:[generic|magic]
   data.read
      table:ml_types
      where
         and
            type.eq:shopping-cart-demo
   if
      not-exists:x:@data.read/*
      .lambda

         // Creating our default type.
         data.create
            table:ml_types
            values
               type:shopping-cart-demo
               model:gpt-4o
               max_tokens:int:4000
               max_context_tokens:int:4000
               max_request_tokens:int:250
               temperature:decimal:0.3
               supervised:int:1
               conversation_starters:@"* What can I ask you about?
* What products do you have?
* Who created this chatbot?"
               greeting:Hi there, I am Q, how can I help you today with your spy gear?
               system_message:@"You are a helpful assistent in a spy shop that sells spy gear to 00X spies. Your name is Q and you will greet the user as 00X, and guide him through purchasing items he needs for his next mission.

## How to add an item to shopping cart

If the user informs you that he or she wants to buy an item and you know the item's SKU, then respond with this EXACT response, only exchanging the [sku] and the [quantity].

___
FUNCTION_INVOCATION[/modules/shopping-cart-demo/workflows/add-item.hl]:
{
  ""sku"": ""[sku]"",
  ""quantity"": ""[quantity]""
}
___

If the user did not provide a quantity then do NOT ask the user for a quantity but use a value of 1 by default. If you don't know the item's SKU, ask the user to provide some more keywords for what item he or she wants to buy such that you can find the correct SKU before responding with the above function invocation.

## How to remove an item from the shopping cart

If the user informs you that he or she wants to remove an item from his or her shopping cart, and you know the item's [item_id], then respond with this EXACT response, only exchanging the [item_id].

___
FUNCTION_INVOCATION[/modules/shopping-cart-demo/workflows/remove-item.hl]:
{
  ""item_id"": ""[item_id]"",
}
___

## How to list the user's shopping cart items

If the user wants to know which items are in his or her shopping cart then respond with this EXACT response.

___
FUNCTION_INVOCATION[/modules/shopping-cart-demo/workflows/list-items.hl]
___

## How to list available products

If the user wants to know which products are available then respond with this EXACT response.

___
FUNCTION_INVOCATION[/modules/shopping-cart-demo/workflows/list-products.hl]
___

ALWAYS respond as illustrated above if the user wants to know which products are available.

## How to checkout

If the user wants to checkout and pay then respond with this EXACT response.

___
FUNCTION_INVOCATION[/modules/shopping-cart-demo/workflows/checkout.hl]
___

## General rules for all function invocations

* When listing products or shopping cart items, then respond with the item's name being an H1 element, and description as a paragraph below the name. Display the rest of the item's data as a bulleted list below the description. If you've got images then add these at the end of the item's listing as Markdown such as follow ![ITEM_NAME](IMAGE_URL).
* It is CRUCIAL that you put the FUNCTION_INVOCATION parts and any JSON payload inside of two ___ lines for any FUNCTION_INVOCATION you return."

// Deleting task if it's been created before.
tasks.list:shopping-cart-demo.synchronize-products
if
   exists:x:@tasks.list/*
   .lambda

      // Deleting previously created task.
      tasks.delete:shopping-cart-demo.synchronize-products

// Creating task.
tasks.create:shopping-cart-demo.synchronize-products
   .lambda

      // Making sure we catch exceptions.
      try

         // First deleting all products previously synchronized.
         log.info:Deleting spy products from ml_training_snippets
         data.connect:[generic|magic]

            // Deleting from VSS shadow table.
            data.execute:"delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = 'shopping-cart-demo' and meta = 'imported')"

            // Deleting from ml_training_snippets table.
            data.delete
               table:ml_training_snippets
               where
                  and
                     type.eq:shopping-cart-demo
                     meta.eq:imported

         // Selecting all products from shopping-cart-demo database.
         log.info:Fetching products from your shopping-cart-demo database
         .products
         data.connect:[generic|shopping-cart-demo]
            data.read
               table:products
            add:x:@.products
               get-nodes:x:@data.read/*

         // Inserting all products into ml_training_snippets table in magic database.
         log.info:Inserting items into ml_training_snippets
         data.connect:[generic|magic]

            // Looping through each product fetched above.
            for-each:x:@.products/*

               // Creating our completion.
               .completion
               set-value:x:@.completion
                  strings.concat
                     get-value:x:@.dp/#/*/description
                     .:". "
                     .:"SKU is '"
                     get-value:x:@.dp/#/*/sku
                     .:"'. Price is $"
                     get-value:x:@.dp/#/*/price

               // Inserting into ml_training_snippets.
               data.create
                  table:ml_training_snippets
                  values
                     type:shopping-cart-demo
                     prompt:x:@.dp/#/*/name
                     completion:x:@.completion
                     meta:imported

         // Vectorizing model.
         log.info:Vectorizing shopping-cart-demo type
         unwrap:x:+/*
         signal:magic.ai.vectorise
            type:shopping-cart-demo

      .catch

         // Oops ...!!
         log.error:x:@.arguments/*/message

// Executing task initially to synchronize from products to ml_training_snippets.
tasks.execute:shopping-cart-demo.synchronize-products